#!/bin/bash
set -euo pipefail

# Temporarily move the current postgres database into a tempfs.
# Great for testing, but don't do this if you have important data in your DB.
# If you forget to run 'down' befor shutdown or your PC crashes, your data is lost.
postgres_dir="/var/lib/postgres"
postgres_data="$postgres_dir/data"
temp_dir="$HOME/temp"
data_temp="$temp_dir/postgres_data"

if [ $# -eq 0 ]; then
    echo "No arguments supplied. Use [up|down]."
    exit 1;
fi

if [ "$1" == "up" ]; then
    if [[ -d "$data_temp" ]]; then
        echo "The $data_temp backup already exists. Aborting."
        exit 1;
    fi

    mkdir -p $temp_dir
    echo "Stop service and backup data"
    sudo systemctl stop postgresql
    sudo mv $postgres_data $data_temp

    echo "Mount tmpfs and copy data"
    sudo mount -t tmpfs -o size=32G tmpfs $postgres_dir
    sudo cp -r $data_temp $postgres_data
    sudo chown postgres:postgres -R $postgres_dir

    echo "Start postgres"
    sudo systemctl start postgresql
elif [ "$1" == "down" ]; then
    if [[ ! -d "$data_temp" ]]; then
        echo "The $data_temp backup doesn't exist. Aborting."
        exit 1;
    fi
    echo "Stop service and unmount tmpfs"
    sudo systemctl stop postgresql

    # Umount the tmpfs, if it's still mounted.
    if mountpoint -q -- "$postgres_dir"; then
        sudo umount $postgres_dir
    fi

    echo "Remove existing data folder"
    # This is necessary, if the system crashed while the database was in tmpfs.
    # On reboot and service startup, a new stub `data` folder might be created.
    sudo rm -rf $postgres_data

    echo "Restore the old data"
    sudo mv $data_temp $postgres_data
    sudo chown postgres:postgres -R $postgres_dir

    echo "Start postgres"
    sudo systemctl start postgresql
fi
